/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;
import java.util.Random;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
public class Library {
    public static void main(String[] args) {
    }

    public static String tally(ArrayList <String> v){
        Map<String, Integer> map = new HashMap<>();

        for (String name : v) {
            map.put(name,map.getOrDefault(name, 0) + 1);
        } int max=0;
        for (String name : v) {
            if(max<map.get(name))
                max=map.get(name);
        }
        for (String name : v) {
            if(max==map.get(name)){
                return(name);

            }}}


    public static  ArrayList <Integer> theLowestAverageArr(int [][] WMT){
        Set<Integer> numberSet = new HashSet<>();
        ArrayList<Integer> intList = new ArrayList<>();
        int min=1000000 , max=0;
        for (int i=0;i<WMT.length;++i)
            for (int ii=0;ii<WMT[0].length;++ii){
                numberSet.add(WMT[i][ii]);
                if(WMT[i][ii]<min)
                    min=WMT[i][ii];
                if(max<WMT[i][ii])
                    max=WMT[i][ii];
            }
        System.out.println("high"+max);
        System.out.println("low"+min);
        for(int i=min;i<=max;++i){
            if(!numberSet.contains(i)){
                intList.add(i);
                System.out.println(i);}}
        return intList;
    }

    public static int[] roll(int num) {
        int[] dices= new int[num];
        Random rand = new Random();
        for (int i =0  ; i <dices.length; i++) {
            dices[i] =rand.nextInt(6) +1;

        }

        return dices;
    }
    public  static <t>  boolean containsDuplicates(t[] arr){
        //https://stackoverflow.com/questions/27568248/how-to-write-a-method-that-accepts-an-array-of-type-x-and-another-variable-with

        for(int i = 0; i < arr.length; i++) {
            for(int j = i + 1; j < arr.length; j++) {
                if(arr[i].equals(  arr[j])){
                    return true;}
            }
        }
        return false;
    }
    public static double  calculatingAverages(int[] arr) {
        int collective=0;
        for (int i = 0; i < arr.length; i++) {
            collective+=arr[i];
//            System.out.println(collective);
        }
        return collective/ arr.length;
    }
    public  static int[] theLowestAverageArr(int[][] arr){
        double[] averageArr = new double[arr.length];
        for (int i = 0; i < arr.length; i++) {
            averageArr[i]=calculatingAverages(arr[i]);

        }
        System.out.println(averageArr);
        return arr[smallestValueIndex(averageArr)];
    }
    public  static int smallestValueIndex(double[] arr){
        int i;
        double min=arr[0];
        int minIndex=0;
        for ( i=1 ; i < arr.length; i++) {
            if(min>arr[i]){
                min=arr[i];
                minIndex=i;
            }
        }
        return minIndex;

    }


}
